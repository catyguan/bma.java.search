/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.search.engine.api;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * 搜索结果项
 */
public class SearchItem implements
		org.apache.thrift.TBase<SearchItem, SearchItem._Fields>,
		java.io.Serializable, Cloneable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"SearchItem");

	private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"data", org.apache.thrift.protocol.TType.MAP, (short) 1);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new SearchItemStandardSchemeFactory());
		schemes.put(TupleScheme.class, new SearchItemTupleSchemeFactory());
	}

	/**
	 * 结果项的数据
	 */
	public Map<String, String> data; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		/**
		 * 结果项的数据
		 */
		DATA((short) 1, "data");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // DATA
				return DATA;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData(
				"data", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(
						org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING))));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				SearchItem.class, metaDataMap);
	}

	public SearchItem() {
	}

	public SearchItem(Map<String, String> data) {
		this();
		this.data = data;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public SearchItem(SearchItem other) {
		if (other.isSetData()) {
			Map<String, String> __this__data = new HashMap<String, String>();
			for (Map.Entry<String, String> other_element : other.data
					.entrySet()) {

				String other_element_key = other_element.getKey();
				String other_element_value = other_element.getValue();

				String __this__data_copy_key = other_element_key;

				String __this__data_copy_value = other_element_value;

				__this__data
						.put(__this__data_copy_key, __this__data_copy_value);
			}
			this.data = __this__data;
		}
	}

	public SearchItem deepCopy() {
		return new SearchItem(this);
	}

	@Override
	public void clear() {
		this.data = null;
	}

	public int getDataSize() {
		return (this.data == null) ? 0 : this.data.size();
	}

	public void putToData(String key, String val) {
		if (this.data == null) {
			this.data = new HashMap<String, String>();
		}
		this.data.put(key, val);
	}

	/**
	 * 结果项的数据
	 */
	public Map<String, String> getData() {
		return this.data;
	}

	/**
	 * 结果项的数据
	 */
	public SearchItem setData(Map<String, String> data) {
		this.data = data;
		return this;
	}

	public void unsetData() {
		this.data = null;
	}

	/**
	 * Returns true if field data is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetData() {
		return this.data != null;
	}

	public void setDataIsSet(boolean value) {
		if (!value) {
			this.data = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case DATA:
			if (value == null) {
				unsetData();
			} else {
				setData((Map<String, String>) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case DATA:
			return getData();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case DATA:
			return isSetData();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof SearchItem)
			return this.equals((SearchItem) that);
		return false;
	}

	public boolean equals(SearchItem that) {
		if (that == null)
			return false;

		boolean this_present_data = true && this.isSetData();
		boolean that_present_data = true && that.isSetData();
		if (this_present_data || that_present_data) {
			if (!(this_present_data && that_present_data))
				return false;
			if (!this.data.equals(that.data))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(SearchItem other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		SearchItem typedOther = (SearchItem) other;

		lastComparison = Boolean.valueOf(isSetData()).compareTo(
				typedOther.isSetData());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetData()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data,
					typedOther.data);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("SearchItem(");
		boolean first = true;

		sb.append("data:");
		if (this.data == null) {
			sb.append("null");
		} else {
			sb.append(this.data);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class SearchItemStandardSchemeFactory implements
			SchemeFactory {
		public SearchItemStandardScheme getScheme() {
			return new SearchItemStandardScheme();
		}
	}

	private static class SearchItemStandardScheme extends
			StandardScheme<SearchItem> {

		public void read(org.apache.thrift.protocol.TProtocol iprot,
				SearchItem struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // DATA
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map0 = iprot
									.readMapBegin();
							struct.data = new HashMap<String, String>(
									2 * _map0.size);
							for (int _i1 = 0; _i1 < _map0.size; ++_i1) {
								String _key2; // required
								String _val3; // required
								_key2 = iprot.readString();
								_val3 = iprot.readString();
								struct.data.put(_key2, _val3);
							}
							iprot.readMapEnd();
						}
						struct.setDataIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot,
				SearchItem struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.data != null) {
				oprot.writeFieldBegin(DATA_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.STRING,
							struct.data.size()));
					for (Map.Entry<String, String> _iter4 : struct.data
							.entrySet()) {
						oprot.writeString(_iter4.getKey());
						oprot.writeString(_iter4.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class SearchItemTupleSchemeFactory implements SchemeFactory {
		public SearchItemTupleScheme getScheme() {
			return new SearchItemTupleScheme();
		}
	}

	private static class SearchItemTupleScheme extends TupleScheme<SearchItem> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot,
				SearchItem struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetData()) {
				optionals.set(0);
			}
			oprot.writeBitSet(optionals, 1);
			if (struct.isSetData()) {
				{
					oprot.writeI32(struct.data.size());
					for (Map.Entry<String, String> _iter5 : struct.data
							.entrySet()) {
						oprot.writeString(_iter5.getKey());
						oprot.writeString(_iter5.getValue());
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot,
				SearchItem struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(1);
			if (incoming.get(0)) {
				{
					org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.STRING,
							iprot.readI32());
					struct.data = new HashMap<String, String>(2 * _map6.size);
					for (int _i7 = 0; _i7 < _map6.size; ++_i7) {
						String _key8; // required
						String _val9; // required
						_key8 = iprot.readString();
						_val9 = iprot.readString();
						struct.data.put(_key8, _val9);
					}
				}
				struct.setDataIsSet(true);
			}
		}
	}

}
